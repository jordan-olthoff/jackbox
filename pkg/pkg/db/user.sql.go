// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: user.sql

package db

import (
	"context"
)

const assignUserRole = `-- name: AssignUserRole :exec
INSERT INTO user_roles (
    user_id, roles_id
) VALUES ( $1, (SELECT id FROM roles WHERE name = $2) )
`

type AssignUserRoleParams struct {
	UserID int64
	Name   string
}

func (q *Queries) AssignUserRole(ctx context.Context, arg AssignUserRoleParams) error {
	_, err := q.db.ExecContext(ctx, assignUserRole, arg.UserID, arg.Name)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, firstname, lastname, email, password)
VALUES ($1, $2, $3, $4, crypt($5, gen_salt('bf'))) RETURNING id
`

type CreateUserParams struct {
	Username  string
	Firstname string
	Lastname  string
	Email     string
	Crypt     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Firstname,
		arg.Lastname,
		arg.Email,
		arg.Crypt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getRoleByUsername = `-- name: GetRoleByUsername :one
SELECT name FROM roles WHERE id=(
    SELECT roles_id FROM user_roles WHERE user_id=
    (
        SELECT id FROM users WHERE username=$1
    )
)
`

func (q *Queries) GetRoleByUsername(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getRoleByUsername, username)
	var name string
	err := row.Scan(&name)
	return name, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, firstname, lastname, email, password FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserByEmailAndPassword = `-- name: GetUserByEmailAndPassword :one
SELECT (password = crypt($1, (SELECT password FROM users WHERE users.email=$2))) AS password_matches,
       email, username, firstname, lastname FROM users WHERE email=$2 LIMIT 1
`

type GetUserByEmailAndPasswordParams struct {
	Crypt string
	Email string
}

type GetUserByEmailAndPasswordRow struct {
	PasswordMatches bool
	Email           string
	Username        string
	Firstname       string
	Lastname        string
}

func (q *Queries) GetUserByEmailAndPassword(ctx context.Context, arg GetUserByEmailAndPasswordParams) (GetUserByEmailAndPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailAndPassword, arg.Crypt, arg.Email)
	var i GetUserByEmailAndPasswordRow
	err := row.Scan(
		&i.PasswordMatches,
		&i.Email,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, firstname, lastname, email, password FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getUserByUsernameAndPassword = `-- name: GetUserByUsernameAndPassword :one
SELECT (password = crypt($1, (SELECT password FROM users WHERE users.username=$2))) AS password_matches,
       email, username, firstname, lastname FROM users WHERE username=$2 LIMIT 1
`

type GetUserByUsernameAndPasswordParams struct {
	Crypt    string
	Username string
}

type GetUserByUsernameAndPasswordRow struct {
	PasswordMatches bool
	Email           string
	Username        string
	Firstname       string
	Lastname        string
}

func (q *Queries) GetUserByUsernameAndPassword(ctx context.Context, arg GetUserByUsernameAndPasswordParams) (GetUserByUsernameAndPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsernameAndPassword, arg.Crypt, arg.Username)
	var i GetUserByUsernameAndPasswordRow
	err := row.Scan(
		&i.PasswordMatches,
		&i.Email,
		&i.Username,
		&i.Firstname,
		&i.Lastname,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, firstname, lastname, email FROM users
ORDER BY id LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32
	Offset int32
}

type ListUsersRow struct {
	ID        int64
	Username  string
	Firstname string
	Lastname  string
	Email     string
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Firstname,
			&i.Lastname,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
